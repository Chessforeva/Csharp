//
// Redesigned by ChatGPT 2025.jan
//
// Compiles ok, but no intention to use, not verified and just waits as a template.
//

using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Diagnostics;

namespace ExeConnector
{
    public class MyWebServer
    {
        private Thread serverThread;
        private TcpListener listener;
        private string currentPath;
        private int port;
        private Process process;
        private StreamWriter writeStream;

        public MyWebServer()
        {
            currentPath = Environment.CurrentDirectory + Path.DirectorySeparatorChar;

            try
            {
                // Automatically determine the IP address and port
                var ip = GetLocalIPAddress();
                port = GetPortNumber();

                Console.WriteLine($"Starting server at http://{ip}:{port}/");

                listener = new TcpListener(IPAddress.Parse(ip), port);
                listener.Start();

                Console.WriteLine("Web Server & transit sockets are Running... Press Ctrl+C to stop.");

                serverThread = new Thread(StartListen);
                serverThread.Start();

                StartExe();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while starting the server: {ex}");
            }
        }

        private string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            throw new Exception("No network adapters with an IPv4 address in the system!");
        }

        private int GetPortNumber()
        {
            try
            {
                using (var sr = new StreamReader("data" + Path.DirectorySeparatorChar + "port.dat"))
                {
                    if (int.TryParse(sr.ReadLine(), out int port))
                    {
                        Console.WriteLine($"Listening on port: {port}");
                        return port;
                    }
                }
            }
            catch
            {
                Console.WriteLine("Failed to read port from file. Using default port 80.");
            }
            return 80;
        }

        private void StartListen()
        {
            while (true)
            {
                try
                {
                    var clientSocket = listener.AcceptSocket();
                    if (clientSocket.Connected)
                    {
                        Console.WriteLine("Client connected: {0}", clientSocket.RemoteEndPoint);
                        // Handle client communication here
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error while listening: {ex}");
                }
            }
        }

        private void StartExe()
        {
            try
            {
                process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = currentPath + GetExeName(),
                        Arguments = GetExeArguments(),
                        CreateNoWindow = true,
                        UseShellExecute = false,
                        RedirectStandardInput = true,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        WorkingDirectory = currentPath
                    }
                };

                process.OutputDataReceived += (s, e) => Console.WriteLine(e.Data);
                process.ErrorDataReceived += (s, e) => Console.WriteLine($"Error: {e.Data}");

                process.Start();
                process.BeginOutputReadLine();

                writeStream = process.StandardInput;
                Console.WriteLine("Process started successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to start process: {ex}");
            }
        }

        private string GetExeName()
        {
            try
            {
                return File.ReadAllText("data" + Path.DirectorySeparatorChar + "Exe2Start.dat").Trim();
            }
            catch
            {
                Console.WriteLine("Error reading executable name.");
                return string.Empty;
            }
        }

        private string GetExeArguments()
        {
            try
            {
                return File.ReadAllText("data" + Path.DirectorySeparatorChar + "Arguments.dat").Trim();
            }
            catch
            {
                Console.WriteLine("Error reading executable arguments.");
                return string.Empty;
            }
        }

        ~MyWebServer()
        {
            if (process != null && !process.HasExited)
            {
                process.Kill();
            }
            listener.Stop();
            Console.WriteLine("Server shut down.");
        }
    }
}
